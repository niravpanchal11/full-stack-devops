AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  EnvironmentName:
    Type: String
    Description: "Name of the environment"
  AcmCertificateId:
    Type: String
    Description: "Root Domain ACM certificate ID"

Resources:

  ALBPrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "knit-${EnvironmentName}-private-alb"
      VpcId: !ImportValue
        Fn::Sub: "knit-${EnvironmentName}-vpc"

  PrivateApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ALBPrivateSG
    Properties:
      Name: !Sub "knit-${EnvironmentName}-private-alb"
      Type: application
      Scheme: internal
      Subnets:
        - !ImportValue
            Fn::Sub: "knit-${EnvironmentName}-private-subnet-1"
        - !ImportValue
            Fn::Sub: "knit-${EnvironmentName}-private-subnet-2"
        - !ImportValue
            Fn::Sub: "knit-${EnvironmentName}-private-subnet-3"
      SecurityGroups: 
        - !Ref ALBPrivateSG
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '599'
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: 'false'
  
  HTTP80ListenerPrivate:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: PrivateApplicationLoadBalancer
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
            ContentType: text/plain
            MessageBody: "This is a default response"
      LoadBalancerArn: !Ref PrivateApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "knit-${EnvironmentName}-public-alb"
      VpcId: !ImportValue
        Fn::Sub: "knit-${EnvironmentName}-vpc"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ALBSG
    Properties:
      Name: !Sub "knit-${EnvironmentName}-alb"
      Type: application
      Scheme: internet-facing
      Subnets:
        - !ImportValue
            Fn::Sub: "knit-${EnvironmentName}-public-subnet-1"
        - !ImportValue
            Fn::Sub: "knit-${EnvironmentName}-public-subnet-2"
        - !ImportValue
            Fn::Sub: "knit-${EnvironmentName}-public-subnet-3"
      SecurityGroups: 
        - !Ref ALBSG
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '599'
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: 'false'

  HTTP80Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ApplicationLoadBalancer
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            StatusCode: HTTP_301
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  HTTPS443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ApplicationLoadBalancer
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${AcmCertificateId}" 
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06

Outputs:
  PublicAlbHTTPS443Listener:
    Value: !Ref HTTPS443Listener
    Export:
      Name: !Sub "knit-${EnvironmentName}-public-alb-https-443-listener"
  PrivateAlbHTTPS80Listener:
    Value: !Ref HTTP80ListenerPrivate
    Export:
      Name: !Sub "knit-${EnvironmentName}-private-alb-https-80-listener"
  ALBSG:
    Value: !Ref ALBSG
    Export:
      Name: !Sub "knit-${EnvironmentName}-public-alb-sg"
  ALBPrivateSG:
    Value: !Ref ALBPrivateSG
    Export:
      Name: !Sub "knit-${EnvironmentName}-private-alb-sg"
