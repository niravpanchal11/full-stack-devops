AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation Script for ECS service and Task Definition'

Parameters:
  ECSClusterName:
    Description: Kindly enter the name of the container
    Type: "String"
    Default: "knit-backend-uat"
  ContainerName:
    Description: Kindly enter the name of the container
    Type: "String"
    Default: "knit-uat-external-connect-container"
  Image:
    Description: Kindly enter the name of the image along with tag 
    Type: "String"
    Default: "020587470742.dkr.ecr.us-east-1.amazonaws.com/knit-uat-external-connect:latest"
  PortMapping:
    Description: Kindly enter the port number for your application  
    Type: "Number"
    Default: "80"
  HealthCheckPath:
    Description: Kindly enter health check path for your application  
    Type: "String" 
    Default: "/docs"
  FamilyName:
    Description: Kindly enter the name of the application so that it can be recognised in creating revisions 
    Type: "String"
    Default: "knit-uat-external-connect"
  ServiceName:
    Description: Kindly enter the service name  
    Type: "String"
    Default: "knit-uat-external-connect"
  BucketName:
    Description: Kindly enter the name of the bucket containing environment files.
    Type: "String"
    Default: "knit-uat-backend-environment-files"
  TargetGroupName:
    Description: Kindly enter the name of the Target group.
    Type: "String"
    Default: "knit-uat-external-connect-tg"
  ApiAccessUrl:
    Description: Kindly enter the url which will be used to access the service.
    Type: "String"
    Default: "uatexternalconnectapi.goknit.com"
  Priority:
    Description: Kindly enter priority number
    Type: "Number"  
    Default: 6


Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: knit-uat-external-connect-ecs-task-role
      Policies:
        - PolicyName: AmazonECSTaskRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:ListSecrets
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:ListSecretVersionIds
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:knit_uat_secrete_manager-fBKEar'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: 'arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*'

  Task:
      Type: AWS::ECS::TaskDefinition
      Properties: 
        Family: !Ref FamilyName
        Cpu: 512
        Memory: 1024
        NetworkMode: awsvpc
        TaskRoleArn: !GetAtt TaskRole.Arn
        RequiresCompatibilities:
          - FARGATE
        ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/knit-uat-ecs-taskexecution-role'
        ContainerDefinitions:
          - Name: !Ref ContainerName
            Image: !Ref Image
            EnvironmentFiles: 
              - Type: "s3"
                Value: !Join [ "", ["arn:aws:s3:::",!Ref BucketName,"/",!Ref ServiceName,".env" ]]
            PortMappings:
              - ContainerPort: !Ref PortMapping
                Protocol: tcp
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: "knit-backend-main-log-group"
                awslogs-region: !Ref 'AWS::Region'
                awslogs-stream-prefix: uat-knit-external-connect-service

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup      
    Properties:
     VpcId: vpc-074bb0b6f81390144
     GroupDescription: for ecs containers
     SecurityGroupIngress:
       - SourceSecurityGroupId: sg-006e3455a3195dda4
         IpProtocol: tcp
         FromPort: !Ref PortMapping
         ToPort: !Ref PortMapping   

  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: Discovery Service for the Application
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Ref ServiceName
      NamespaceId: ns-bv7iiulgtut55mya

  PublicService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      TaskDefinition: !Ref Task
      Cluster: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSClusterName}'
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 70
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - subnet-03f7e0d21159d4cfe
            - subnet-0ce07f51b93037168
          SecurityGroups:
            - !Ref PublicSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: !Ref PortMapping
          TargetGroupArn: !Ref ServiceTargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryService.Arn

  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupName
      VpcId: vpc-074bb0b6f81390144
      Port: !Ref PortMapping
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 25
      HealthyThresholdCount: 10
      UnhealthyThresholdCount: 5
      TargetType: ip
      TargetGroupAttributes: 
        - Key: load_balancing.algorithm.type
          Value: least_outstanding_requests

  ServiceListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ServiceTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref ApiAccessUrl
      ListenerArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/knit-devuat-alb/3d51b2470f5ac635/1ede720b5b57e7b0' 
      Priority: !Ref Priority

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - PublicService
    Properties:
      ServiceNamespace: 'ecs'
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Sub 'service/${ECSClusterName}/${ServiceName}'
      MinCapacity: 1
      MaxCapacity: 5
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/knit-uat-auto-scaling-role'

  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName: !Sub knit-uat-${ECSClusterName}-${ServiceName}-service-scale-down-policy
      PolicyType: StepScaling
      ResourceId: !Sub 'service/${ECSClusterName}/${ServiceName}'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        MinAdjustmentMagnitude: 1
        AdjustmentType: 'PercentChangeInCapacity'
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -50
        MetricAggregationType: 'Average'
        Cooldown: 60

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName: !Sub knit-uat-${ECSClusterName}-${ServiceName}-service-scale-up-policy
      PolicyType: StepScaling
      ResourceId: !Sub 'service/${ECSClusterName}/${ServiceName}'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        MinAdjustmentMagnitude: 1
        AdjustmentType: 'PercentChangeInCapacity'
        StepAdjustments:
          - MetricIntervalLowerBound: 40
            MetricIntervalUpperBound: 60
            ScalingAdjustment: 50
          - MetricIntervalLowerBound: 60
            MetricIntervalUpperBound: 75
            ScalingAdjustment: 50
          - MetricIntervalLowerBound: 75
            ScalingAdjustment: 50
        MetricAggregationType: 'Maximum'
        Cooldown: 60

  # Create alarms to trigger the scaling policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub knit-uat-low-cpu-${ECSClusterName}-${ServiceName}-service-alarm
      AlarmDescription: !Sub "Low CPU utilization for service ${ServiceName} in cluster ${ECSClusterName}"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value: !Ref 'ECSClusterName'
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub knit-uat-high-cpu-${ECSClusterName}-${ServiceName}-service-alarm
      AlarmDescription: !Sub "High CPU utilization for service ${ServiceName} in cluster ${ECSClusterName}"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value: !Ref 'ECSClusterName'
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy
